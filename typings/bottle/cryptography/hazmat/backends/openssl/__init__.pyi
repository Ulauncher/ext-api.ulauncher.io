"""
This type stub file was generated by pyright.
"""

from cryptography.hazmat.bindings._rust import openssl as rust_openssl
from cryptography.hazmat.bindings.openssl import binding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives._asymmetric import AsymmetricPadding
from cryptography.hazmat.primitives.asymmetric import ec, utils as asym_utils
from cryptography.hazmat.primitives.asymmetric.padding import MGF1, OAEP, PKCS1v15, PSS
from cryptography.hazmat.primitives.ciphers import CipherAlgorithm
from cryptography.hazmat.primitives.ciphers.algorithms import AES
from cryptography.hazmat.primitives.ciphers.modes import CBC, Mode

class Backend:
    """
    OpenSSL API binding interfaces.
    """
    name = ...
    _fips_ciphers = ...
    _fips_hashes = ...
    _fips_ecdh_curves = ...
    _fips_rsa_min_key_size = ...
    _fips_rsa_min_public_exponent = ...
    _fips_dsa_min_modulus = ...
    _fips_dh_min_key_size = ...
    _fips_dh_min_modulus = ...
    def __init__(self) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def openssl_assert(self, ok: bool) -> None:
        ...
    
    def openssl_version_text(self) -> str:
        """
        Friendly string name of the loaded OpenSSL library. This is not
        necessarily the same version as it was compiled against.

        Example: OpenSSL 3.2.1 30 Jan 2024
        """
        ...
    
    def openssl_version_number(self) -> int:
        ...
    
    def hash_supported(self, algorithm: hashes.HashAlgorithm) -> bool:
        ...
    
    def signature_hash_supported(self, algorithm: hashes.HashAlgorithm) -> bool:
        ...
    
    def scrypt_supported(self) -> bool:
        ...
    
    def argon2_supported(self) -> bool:
        ...
    
    def hmac_supported(self, algorithm: hashes.HashAlgorithm) -> bool:
        ...
    
    def cipher_supported(self, cipher: CipherAlgorithm, mode: Mode) -> bool:
        ...
    
    def pbkdf2_hmac_supported(self, algorithm: hashes.HashAlgorithm) -> bool:
        ...
    
    def rsa_padding_supported(self, padding: AsymmetricPadding) -> bool:
        ...
    
    def rsa_encryption_supported(self, padding: AsymmetricPadding) -> bool:
        ...
    
    def dsa_supported(self) -> bool:
        ...
    
    def dsa_hash_supported(self, algorithm: hashes.HashAlgorithm) -> bool:
        ...
    
    def cmac_algorithm_supported(self, algorithm) -> bool:
        ...
    
    def elliptic_curve_supported(self, curve: ec.EllipticCurve) -> bool:
        ...
    
    def elliptic_curve_signature_algorithm_supported(self, signature_algorithm: ec.EllipticCurveSignatureAlgorithm, curve: ec.EllipticCurve) -> bool:
        ...
    
    def elliptic_curve_exchange_algorithm_supported(self, algorithm: ec.ECDH, curve: ec.EllipticCurve) -> bool:
        ...
    
    def dh_supported(self) -> bool:
        ...
    
    def dh_x942_serialization_supported(self) -> bool:
        ...
    
    def x25519_supported(self) -> bool:
        ...
    
    def x448_supported(self) -> bool:
        ...
    
    def ed25519_supported(self) -> bool:
        ...
    
    def ed448_supported(self) -> bool:
        ...
    
    def ecdsa_deterministic_supported(self) -> bool:
        ...
    
    def poly1305_supported(self) -> bool:
        ...
    
    def pkcs7_supported(self) -> bool:
        ...
    


backend = ...
