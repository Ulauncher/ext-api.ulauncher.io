"""
This type stub file was generated by pyright.
"""

import logging
import re
from functools import cmp_to_key

logger = ...
SEMVER_SPEC_VERSION = ...
class InvalidTypeIncluded(ValueError):
    ...


class _R:
    def __init__(self, i) -> None:
        ...
    
    def __call__(self): # -> Any:
        ...
    
    def value(self): # -> Any:
        ...
    


class Extendlist(list):
    def __setitem__(self, i, v): # -> None:
        ...
    


def list_get(xs, i): # -> None:
    ...

R = ...
src = ...
regexp = ...
NUMERICIDENTIFIER = ...
NUMERICIDENTIFIERLOOSE = ...
NONNUMERICIDENTIFIER = ...
NONNUMERICIDENTIFIERBEGINNONNUMBER = ...
MAINVERSION = ...
MAINVERSIONLOOSE = ...
PRERELEASEIDENTIFIER = ...
PRERELEASEIDENTIFIERLOOSE = ...
PRERELEASE = ...
PRERELEASELOOSE = ...
BUILDIDENTIFIER = ...
BUILD = ...
FULL = ...
FULLPLAIN = ...
LOOSEPLAIN = ...
LOOSE = ...
GTLT = ...
XRANGEIDENTIFIERLOOSE = ...
XRANGEIDENTIFIER = ...
XRANGEPLAIN = ...
XRANGEPLAINLOOSE = ...
XRANGE = ...
XRANGELOOSE = ...
LONETILDE = ...
TILDETRIM = ...
tildeTrimReplace = ...
TILDE = ...
TILDELOOSE = ...
LONECARET = ...
CARETTRIM = ...
caretTrimReplace = ...
CARET = ...
CARETLOOSE = ...
COMPARATORLOOSE = ...
COMPARATOR = ...
COMPARATORTRIM = ...
comparatorTrimReplace = ...
HYPHENRANGE = ...
HYPHENRANGELOOSE = ...
STAR = ...
RECOVERYVERSIONNAME = ...
def parse(version, loose): # -> SemVer | None:
    ...

def valid(version, loose): # -> SemVer | None:
    ...

def clean(version, loose): # -> str | None:
    ...

NUMERIC = ...
def semver(version, loose, include_prerelease=...): # -> SemVer:
    ...

make_semver = ...
class SemVer:
    def __init__(self, version, loose, include_prerelease) -> None:
        ...
    
    def format(self): # -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def compare(self, other): # -> Literal[-1, 0, 1]:
        ...
    
    def compare_main(self, other): # -> Literal[-1, 1, 0]:
        ...
    
    def compare_pre(self, other): # -> Literal[0, 1, -1]:
        ...
    
    def compare_micro(self, other): # -> Literal[0, -1, 1]:
        ...
    
    def inc(self, release, identifier=...): # -> Self:
        ...
    


def inc(version, release, loose, identifier=...): # -> str | None:
    ...

def compare_identifiers(a, b): # -> Literal[-1, 1, 0]:
    ...

def rcompare_identifiers(a, b): # -> Literal[-1, 1, 0]:
    ...

def compare(a, b, loose): # -> Literal[-1, 0, 1]:
    ...

def compare_loose(a, b): # -> Literal[-1, 0, 1]:
    ...

def rcompare(a, b, loose): # -> Literal[-1, 0, 1]:
    ...

loose_key_function = ...
full_key_function = ...
def sort(list, loose):
    ...

def rsort(list, loose):
    ...

def gt(a, b, loose): # -> bool:
    ...

def lt(a, b, loose): # -> bool:
    ...

def eq(a, b, loose): # -> bool:
    ...

def neq(a, b, loose): # -> bool:
    ...

def gte(a, b, loose): # -> bool:
    ...

def lte(a, b, loose): # -> bool:
    ...

def cmp(a, op, b, loose): # -> bool:
    ...

def comparator(comp, loose): # -> Comparator:
    ...

make_comparator = ...
ANY = ...
class Comparator:
    semver = ...
    def __init__(self, comp, loose) -> None:
        ...
    
    def parse(self, comp): # -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def test(self, version): # -> bool:
        ...
    


def make_range(range_, loose): # -> Range:
    ...

class Range:
    def __init__(self, range_, loose, _split_rx=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def format(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def parse_range(self, range_): # -> list[Comparator]:
        ...
    
    def test(self, version, include_prerelease=...): # -> bool:
        ...
    


def to_comparators(range_, loose): # -> list[list[str]]:
    ...

def parse_comparator(comp, loose):
    ...

def is_x(id): # -> Literal[True]:
    ...

def replace_tildes(comp, loose): # -> LiteralString:
    ...

def replace_tilde(comp, loose):
    ...

def replace_carets(comp, loose): # -> LiteralString:
    ...

def replace_caret(comp, loose):
    ...

def replace_xranges(comp, loose): # -> LiteralString:
    ...

def replace_xrange(comp, loose):
    ...

def replace_stars(comp, loose):
    ...

def hyphen_replace(mob): # -> str:
    ...

def test_set(set_, version, include_prerelease=...): # -> bool:
    ...

def satisfies(version, range_, loose=..., include_prerelease=...): # -> bool:
    ...

def max_satisfying(versions, range_, loose=..., include_prerelease=...): # -> None:
    ...

def min_satisfying(versions, range_, loose=..., include_prerelease=...): # -> None:
    ...

def valid_range(range_, loose): # -> str | None:
    ...

def ltr(version, range_, loose): # -> bool:
    ...

def rtr(version, range_, loose): # -> bool:
    ...

def outside(version, range_, hilo, loose): # -> bool:
    ...

